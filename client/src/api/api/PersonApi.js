/**
 * Family Context
 * This is the *DRAFT / WORK IN PROGRESS* API definition for Family Context. This document is currently undergoing rapid change and should not be used as basis for implementation without discussing with the project team. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Person from '../model/Person';
import PersonQuery from '../model/PersonQuery';
import PersonWithRelationship from '../model/PersonWithRelationship';
import ServiceDetail from '../model/ServiceDetail';
import ServiceSummary from '../model/ServiceSummary';

/**
* Person service.
* @module api/PersonApi
* @version 0.0.1
*/
export default class PersonApi {

    /**
    * Constructs a new PersonApi. 
    * @alias module:api/PersonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Find person by ID
     * Returns a single person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Person} and HTTP response
     */
    getPersonByIdWithHttpInfo(personId) {
      let postBody = null;

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Person;

      return this.apiClient.callApi(
        '/api/person/detail/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find person by ID
     * Returns a single person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Person}
     */
    getPersonById(personId) {
      return this.getPersonByIdWithHttpInfo(personId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get related individuals
     * Returns individuals related to the person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PersonWithRelationship>} and HTTP response
     */
    getPersonRelatedWithHttpInfo(personId) {
      let postBody = null;

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PersonWithRelationship];

      return this.apiClient.callApi(
        '/api/person/related/{personId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get related individuals
     * Returns individuals related to the person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PersonWithRelationship>}
     */
    getPersonRelated(personId) {
      return this.getPersonRelatedWithHttpInfo(personId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Is related person supported
     * Tests whether the related person API is supported by this implementation. A return value of 200 indicates that the operation is supported. A 501 indicates that it is not supported, and any front-end applications should suppress the functionality. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getPersonRelatedSupportedWithHttpInfo(personId) {
      let postBody = null;

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/person/related/{personId}/', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Is related person supported
     * Tests whether the related person API is supported by this implementation. A return value of 200 indicates that the operation is supported. A 501 indicates that it is not supported, and any front-end applications should suppress the functionality. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getPersonRelatedSupported(personId) {
      return this.getPersonRelatedSupportedWithHttpInfo(personId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find person by ID
     * Returns a single person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceDetail} and HTTP response
     */
    getPersonServiceByTypeAndIdWithHttpInfo(personId, serviceType) {
      let postBody = null;

      let pathParams = {
        'personId': personId,
        'serviceType': serviceType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDetail;

      return this.apiClient.callApi(
        '/api/person/detail/{personId}/service/{serviceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find person by ID
     * Returns a single person
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceDetail}
     */
    getPersonServiceByTypeAndId(personId, serviceType) {
      return this.getPersonServiceByTypeAndIdWithHttpInfo(personId, serviceType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a summary of the services a person has interacted with
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceSummary>} and HTTP response
     */
    getPersonServicesByIdWithHttpInfo(personId) {
      let postBody = null;

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceSummary];

      return this.apiClient.callApi(
        '/api/person/detail/{personId}/service', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a summary of the services a person has interacted with
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceSummary>}
     */
    getPersonServicesById(personId) {
      return this.getPersonServicesByIdWithHttpInfo(personId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for a person
     * Returns a list of individuals matching the criteria
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Person>} and HTTP response
     */
    searchPersonWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Person];

      return this.apiClient.callApi(
        '/api/search/person', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for a person
     * Returns a list of individuals matching the criteria
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Person>}
     */
    searchPerson(body) {
      return this.searchPersonWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Is person search supported
     * Tests whether the person search API is supported by this implementation. A return value of 200 indicates that the operation is supported. A 501 indicates that it is not supported, and any front-end applications should suppress the search functionality. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    searchPersonSupportedWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/search/person', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Is person search supported
     * Tests whether the person search API is supported by this implementation. A return value of 200 indicates that the operation is supported. A 501 indicates that it is not supported, and any front-end applications should suppress the search functionality. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    searchPersonSupported() {
      return this.searchPersonSupportedWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
