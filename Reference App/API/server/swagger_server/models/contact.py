# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Contact(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, name: str = None, email: str = None, phone: str = None, role: str = None
    ):  # noqa: E501
        """Contact - a model defined in Swagger

        :param name: The name of this Contact.  # noqa: E501
        :type name: str
        :param email: The email of this Contact.  # noqa: E501
        :type email: str
        :param phone: The phone of this Contact.  # noqa: E501
        :type phone: str
        :param role: The role of this Contact.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {"name": str, "email": str, "phone": str, "role": str}

        self.attribute_map = {
            "name": "name",
            "email": "email",
            "phone": "phone",
            "role": "role",
        }
        self._name = name
        self._email = email
        self._phone = phone
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> "Contact":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Contact of this Contact.  # noqa: E501
        :rtype: Contact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Contact.


        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Contact.


        :param name: The name of this Contact.
        :type name: str
        """

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this Contact.


        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Contact.


        :param phone: The phone of this Contact.
        :type phone: str
        """

        self._phone = phone

    @property
    def role(self) -> str:
        """Gets the role of this Contact.


        :return: The role of this Contact.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Contact.


        :param role: The role of this Contact.
        :type role: str
        """

        self._role = role
