# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.contact import Contact  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class School(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        service_involvement: str = None,
        contact: Contact = None,
        school_name: str = None,
        admission_type: str = None,
    ):  # noqa: E501
        """School - a model defined in Swagger

        :param service_involvement: The service_involvement of this School.  # noqa: E501
        :type service_involvement: str
        :param contact: The contact of this School.  # noqa: E501
        :type contact: Contact
        :param school_name: The school_name of this School.  # noqa: E501
        :type school_name: str
        :param admission_type: The admission_type of this School.  # noqa: E501
        :type admission_type: str
        """
        self.swagger_types = {
            "service_involvement": str,
            "contact": Contact,
            "school_name": str,
            "admission_type": str,
        }

        self.attribute_map = {
            "service_involvement": "serviceInvolvement",
            "contact": "contact",
            "school_name": "schoolName",
            "admission_type": "admissionType",
        }
        self._service_involvement = service_involvement
        self._contact = contact
        self._school_name = school_name
        self._admission_type = admission_type

    @classmethod
    def from_dict(cls, dikt) -> "School":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The School of this School.  # noqa: E501
        :rtype: School
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_involvement(self) -> str:
        """Gets the service_involvement of this School.


        :return: The service_involvement of this School.
        :rtype: str
        """
        return self._service_involvement

    @service_involvement.setter
    def service_involvement(self, service_involvement: str):
        """Sets the service_involvement of this School.


        :param service_involvement: The service_involvement of this School.
        :type service_involvement: str
        """

        self._service_involvement = service_involvement

    @property
    def contact(self) -> Contact:
        """Gets the contact of this School.


        :return: The contact of this School.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact: Contact):
        """Sets the contact of this School.


        :param contact: The contact of this School.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def school_name(self) -> str:
        """Gets the school_name of this School.


        :return: The school_name of this School.
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name: str):
        """Sets the school_name of this School.


        :param school_name: The school_name of this School.
        :type school_name: str
        """

        self._school_name = school_name

    @property
    def admission_type(self) -> str:
        """Gets the admission_type of this School.


        :return: The admission_type of this School.
        :rtype: str
        """
        return self._admission_type

    @admission_type.setter
    def admission_type(self, admission_type: str):
        """Sets the admission_type of this School.


        :param admission_type: The admission_type of this School.
        :type admission_type: str
        """

        self._admission_type = admission_type
