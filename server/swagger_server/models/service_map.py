# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.adult_social_care import AdultSocialCare  # noqa: F401,E501
from swagger_server.models.housing import Housing  # noqa: F401,E501
from swagger_server.models.police import Police  # noqa: F401,E501
from swagger_server.models.school import School  # noqa: F401,E501
from swagger_server import util


class ServiceMap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, asc: AdultSocialCare=None, housing: Housing=None, police: Police=None, school: School=None):  # noqa: E501
        """ServiceMap - a model defined in Swagger

        :param asc: The asc of this ServiceMap.  # noqa: E501
        :type asc: AdultSocialCare
        :param housing: The housing of this ServiceMap.  # noqa: E501
        :type housing: Housing
        :param police: The police of this ServiceMap.  # noqa: E501
        :type police: Police
        :param school: The school of this ServiceMap.  # noqa: E501
        :type school: School
        """
        self.swagger_types = {
            'asc': AdultSocialCare,
            'housing': Housing,
            'police': Police,
            'school': School
        }

        self.attribute_map = {
            'asc': 'ASC',
            'housing': 'HOUSING',
            'police': 'POLICE',
            'school': 'SCHOOL'
        }
        self._asc = asc
        self._housing = housing
        self._police = police
        self._school = school

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceMap of this ServiceMap.  # noqa: E501
        :rtype: ServiceMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asc(self) -> AdultSocialCare:
        """Gets the asc of this ServiceMap.


        :return: The asc of this ServiceMap.
        :rtype: AdultSocialCare
        """
        return self._asc

    @asc.setter
    def asc(self, asc: AdultSocialCare):
        """Sets the asc of this ServiceMap.


        :param asc: The asc of this ServiceMap.
        :type asc: AdultSocialCare
        """

        self._asc = asc

    @property
    def housing(self) -> Housing:
        """Gets the housing of this ServiceMap.


        :return: The housing of this ServiceMap.
        :rtype: Housing
        """
        return self._housing

    @housing.setter
    def housing(self, housing: Housing):
        """Sets the housing of this ServiceMap.


        :param housing: The housing of this ServiceMap.
        :type housing: Housing
        """

        self._housing = housing

    @property
    def police(self) -> Police:
        """Gets the police of this ServiceMap.


        :return: The police of this ServiceMap.
        :rtype: Police
        """
        return self._police

    @police.setter
    def police(self, police: Police):
        """Sets the police of this ServiceMap.


        :param police: The police of this ServiceMap.
        :type police: Police
        """

        self._police = police

    @property
    def school(self) -> School:
        """Gets the school of this ServiceMap.


        :return: The school of this ServiceMap.
        :rtype: School
        """
        return self._school

    @school.setter
    def school(self, school: School):
        """Sets the school of this ServiceMap.


        :param school: The school of this ServiceMap.
        :type school: School
        """

        self._school = school
