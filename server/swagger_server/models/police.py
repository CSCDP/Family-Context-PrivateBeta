# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.contact import Contact  # noqa: F401,E501
from swagger_server.models.offence_summary import OffenceSummary  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Police(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_involvement: str=None, contact: Contact=None, police_station: str=None, offences: List[OffenceSummary]=None):  # noqa: E501
        """Police - a model defined in Swagger

        :param service_involvement: The service_involvement of this Police.  # noqa: E501
        :type service_involvement: str
        :param contact: The contact of this Police.  # noqa: E501
        :type contact: Contact
        :param police_station: The police_station of this Police.  # noqa: E501
        :type police_station: str
        :param offences: The offences of this Police.  # noqa: E501
        :type offences: List[OffenceSummary]
        """
        self.swagger_types = {
            'service_involvement': str,
            'contact': Contact,
            'police_station': str,
            'offences': List[OffenceSummary]
        }

        self.attribute_map = {
            'service_involvement': 'serviceInvolvement',
            'contact': 'contact',
            'police_station': 'policeStation',
            'offences': 'offences'
        }
        self._service_involvement = service_involvement
        self._contact = contact
        self._police_station = police_station
        self._offences = offences

    @classmethod
    def from_dict(cls, dikt) -> 'Police':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Police of this Police.  # noqa: E501
        :rtype: Police
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_involvement(self) -> str:
        """Gets the service_involvement of this Police.


        :return: The service_involvement of this Police.
        :rtype: str
        """
        return self._service_involvement

    @service_involvement.setter
    def service_involvement(self, service_involvement: str):
        """Sets the service_involvement of this Police.


        :param service_involvement: The service_involvement of this Police.
        :type service_involvement: str
        """

        self._service_involvement = service_involvement

    @property
    def contact(self) -> Contact:
        """Gets the contact of this Police.


        :return: The contact of this Police.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact: Contact):
        """Sets the contact of this Police.


        :param contact: The contact of this Police.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def police_station(self) -> str:
        """Gets the police_station of this Police.


        :return: The police_station of this Police.
        :rtype: str
        """
        return self._police_station

    @police_station.setter
    def police_station(self, police_station: str):
        """Sets the police_station of this Police.


        :param police_station: The police_station of this Police.
        :type police_station: str
        """

        self._police_station = police_station

    @property
    def offences(self) -> List[OffenceSummary]:
        """Gets the offences of this Police.


        :return: The offences of this Police.
        :rtype: List[OffenceSummary]
        """
        return self._offences

    @offences.setter
    def offences(self, offences: List[OffenceSummary]):
        """Sets the offences of this Police.


        :param offences: The offences of this Police.
        :type offences: List[OffenceSummary]
        """

        self._offences = offences
